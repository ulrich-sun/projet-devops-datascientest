pipeline {
     agent any
    environment {
        DOCKERFILE_NAME = "Dockerfile"
        DOCKERHUB_ID = "ulrichsteve"
        DOCKER_IMAGE = "ic-webapp"
        DOCKER_TAG = "1.0"
        DOCKER_DIR = "./01_docker"
        PORT_EXT= "8090"
        PORT_APP = "8080"
        HOST_IP = "127.0.0.1"
        DOCKERHUB_PASSWORD = credentials('dockerhub_password')

    }

    stages {
        stage('checkout')
           {
            steps {
                scripts {
                    git 'https://github.com/ulrich-sun/projet-devops-datascientest.git'
                }
            }
        }
        stage('Build')
             {
            steps {
               script {
                 sh '''
                    docker build --no-cache -f ${DOCKER_DIR}/${DOCKERFILE_NAME} -t ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_DIR}/.
                '''
               }
            }
        }
        stage('Run and Test') 
             {
            steps {
                script {
                    sh '''
                        docker ps -a | grep -i ${DOCKER_IMAGE} && docker rm -f ${DOCKER_IMAGE}
                        docker run --name ${DOCKER_IMAGE} -dp $PORT_EXT:$PORT_APP ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        sleep 5
                        curl -I http://$HOST_IP:$PORT_EXT | grep -i "200"
                    '''
                }
            }

        }
        // stage('Scan Image') {
        //     steps {
        //         script {
        //             sh '''

        //             '''
        //         }
        //     }

        // }
        stage('Delete') 
             {
            steps {
                script {
                    sh '''
                        docker stop ${DOCKER_IMAGE}
                        docker rm ${DOCKER_IMAGE}
                    '''
                }
            }

        }
        stage('Login and Push'){
            steps {
                script {
                    sh '''
                        echo $DOCKERHUB_PASSWORD | docker login -u ${DOCKERHUB_ID} --password-stdin
                        docker push ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                }
            }

        }
        stage('Build Instance Docker') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            }
            agent {
                docker{
                    image 'hashicorp/terraform'
                }
            }
            steps {
                script {
                    sh '''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd 05_terraform/
                        terraform init 
                        terraform apply -auto-approve
                    '''
                }
            }

        }
        stage('Deploy to Docker VM') {
            agent {
                docker {
                    image 'registry.gitlab.com/dockerfiles6/ansible-lint:latest'
                }
            }
            steps {
                script {
                    sh '''
                        cd 02_ansible/
                        ansible-playbook playbooks/vm_docker.yaml
                    '''
                }
            }
        }
        stage('Build Instance Kubernetes') {
            environment {
                AWS_ACCESS_KEY_ID = 
                AWS_SECRET_ACCESS_KEY = 
            }
            steps {
                script {
                    sh '''
                        mkdir -p ~/.aws
                        cat << EOF > ~/.aws/credentials
                        echo[default]
                        aws_access_key_id=$AWS_ACCESS_KEY_ID
                        aws_secret_access_key=$AWS_SECRET_ACCESS_KEY
                        EOF
                        chmod 400 ~/.aws/credentials
                        cd 05_terraform/
                        terraform init 
                        terraform apply -auto-approve
                    '''
                }
            }
        }
         stage('Deploy to k3s VM') {
            steps {
                script {
                    sh '''
                        cd 02_ansible/
                        ansible-playbook playbooks/vm_k3s.yaml
                    '''
                }
            }
        }
    }
}